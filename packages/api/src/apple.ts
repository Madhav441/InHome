import { ISODate } from '@inhome/core';

export type AppleEnrollmentTrack = 'manual' | 'configurator';

export interface AppleEnrollmentProfileRequest {
  displayName: string;
  topic: string;
  portalBaseUrl: string;
  ttlSeconds?: number;
  track: AppleEnrollmentTrack;
}

export interface AppleEnrollmentProfileResponse {
  profilePlistBase64: string;
  downloadUrl: string;
  expiresAt: string;
  metadata: {
    track: AppleEnrollmentTrack;
    note: string;
  };
}

export interface ApplePushRequest {
  deviceId: string;
  payload: Record<string, unknown>;
  topic: string;
}

export interface ApplePushResponse {
  accepted: boolean;
  apnsId: string;
  note: string;
}

export interface AppleCheckinRequest {
  messageType: string;
  payload: Record<string, unknown>;
}

export interface AppleCheckinResult {
  accepted: boolean;
  deviceId?: string;
  next?: string;
  note?: string;
}

export interface AppleConnectRequest {
  deviceId: string;
  topic: string;
  awaitingCommands: boolean;
}

export interface AppleConnectResponse {
  commands: Array<Record<string, unknown>>;
  nextPollSeconds: number;
  note?: string;
}

const DEFAULT_TTL_SECONDS = 3600;

export const createAppleEnrollmentProfile = (
  request: AppleEnrollmentProfileRequest
): AppleEnrollmentProfileResponse => {
  const ttl = request.ttlSeconds ?? DEFAULT_TTL_SECONDS;
  const expires = new Date(Date.now() + ttl * 1000);
  const portalUrl = request.portalBaseUrl.replace(/\/+$/, '');

  const placeholderProfile = [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<!-- TODO: replace with signed configuration profile output -->',
    `<plist version="1.0">`,
    '  <dict>',
    `    <key>PayloadDisplayName</key>`,
    `    <string>${request.displayName}</string>`,
    `    <key>PayloadIdentifier</key>`,
    `    <string>${request.topic}.bootstrap</string>`,
    `    <key>PayloadDescription</key>`,
    `    <string>Auto-generated by InHome for ${request.track} enrollment</string>`,
    '  </dict>',
    '</plist>',
  ].join('\n');

  return {
    profilePlistBase64: Buffer.from(placeholderProfile, 'utf8').toString('base64'),
    downloadUrl: `${portalUrl}/apple/enroll/profile.mobileconfig?track=${request.track}`,
    expiresAt: ISODate(expires),
    metadata: {
      track: request.track,
      note:
        request.track === 'configurator'
          ? 'Use with Apple Configurator Prepare (Supervise). Device wipe required.'
          : 'Manual profile install. Device remains unsupervised.',
    },
  };
};

export const issueApplePush = (request: ApplePushRequest): ApplePushResponse => {
  // TODO: wire up APNs HTTP/2 push once credentials are injected.
  return {
    accepted: false,
    apnsId: 'pending-apns-integration',
    note: `Stub push for ${request.deviceId} on topic ${request.topic}.`,
  };
};

export const handleAppleCheckin = (request: AppleCheckinRequest): AppleCheckinResult => {
  // TODO: persist tokens and associate with device records.
  return {
    accepted: true,
    deviceId: String(request.payload?.UDID ?? request.payload?.SerialNumber ?? 'unknown-device'),
    next: '/mdm/connect',
    note: `Accepted ${request.messageType} message (persistence pending).`,
  };
};

export const handleAppleConnect = (request: AppleConnectRequest): AppleConnectResponse => {
  // TODO: fetch queued commands from command bus.
  return {
    commands: [],
    nextPollSeconds: request.awaitingCommands ? 5 : 30,
    note: 'No commands queued; returning placeholder response.',
  };
};
